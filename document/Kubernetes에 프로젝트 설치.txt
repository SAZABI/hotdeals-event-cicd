- Kubernetes에 Redis Single로 배포

  1. "hot-deals" Namespace 생성
     kubectl apply -f kubernetes/hot-deals/namespace.yaml

  2. NFS를 이용해서 NAS에 PersistentVolume을 연결
     kubectl apply -f kubernetes/hot-deals/redis-single/pv.yaml

  3. 2번에서 생성한 PersistentVolume에 PersistentVolumeClaim을 연결
     kubectl apply -f kubernetes/hot-deals/redis-single/pvc.yaml

  4. DockerHub에 등록된 Redis Official Image 배포
     kubectl apply -f kubernetes/hot-deals/redis-single/deployment.yaml

  5. 4번에서 생성한 Redis Service 생성
     kubectl apply -f kubernetes/hot-deals/redis-single/service.yaml


- 프로젝트 빌드 및 Docker Image 생성
  1. 프로젝트 빌드 방법
    $ mvnw.cmd -Dmaven.test.skip=true -Pprocess clean install
      "-P"옵션을 이용해서 "hot-deals-poc-process-manager-webapp" 프로젝트만 빌드합니다.
      모든 프로젝트를 빌드하려면 -P 옵션을 제거하면됩니다.
      . "-P" 옵션 제거    : 전체 프로젝트 빌드
      . "-Pcommons" 옵션 : "hot-deals-poc-commons-manager-webapp" 프로젝트 빌드
      . "-Pcoupon" 옵션  : "hot-deals-poc-coupon-manager-webapp" 프로젝트 빌드
      . "-Pprocess" 옵션 : "hot-deals-poc-process-manager-webapp" 프로젝트 빌드

    $ cd hot-deals-poc-process-manager-webapp
      빌드된 hot-deals-poc-process-manager-webapp 프로젝트의 디렉토리로 이동

    $ ..\mvnw.cmd dockerfile:build
      Docker Image를 생성합니다.

    $ docker images
      Docker Images 생성 확인

  2. DockerHub 개인 저장소에 로그인 후 Public으로 PUSH
     $ docker login

     $ docker push "생성된 이미지"

- Kubernetes에 프로젝트 배포

  1. 프로젝트 Deployment 배포
     kubectl apply -f kubernetes/hot-deals/process/deployment.yaml

  2. Ingress와 연동할 수 있도록 Service 생성
     kubectl apply -f kubernetes/hot-deals/process/service.yaml

  3. Ingress 생성
     kubectl apply -f kubernetes/hot-deals/process/ingress.yaml

- 확인
  1. 이벤트 등록
curl --location --request PUT 'http://hot-deals-process.169.56.115.147.nip.io/v1/event/type/1' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--data-raw '{
  "event_id": "2020011101",
  "phone_num": "01132013617",
  "name": "손근양",
  "aggrement": true
}'

  2. 이벤트 등록 조회
curl --location --request GET 'http://hot-deals-process.169.56.115.147.nip.io/v1/event/id/2020011101/phone_num/01132013617' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json'




- Kubernetes에 Cassandra 설치
  참조 : https://github.com/kubernetes/examples/tree/master/cassandra


- 아래에 YAML 파일의 내용을 넣어서 실행
cat <<EOF | kubectl create -f -
>>> YAML 파일의 내용을 넣어서 실행
EOF
